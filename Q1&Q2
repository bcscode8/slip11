Q1.

#include <stdio.h>
#define MAX 100
int
findLFU(int freq[], int n, int frames[], int size)
{
int min = freq[frames[0]], minIndex = 0;
for (int i = 1; i < size; i++)
{
if (freq[frames[i]] < min)
{
min = freq[frames[i]];
minIndex = i;
}
}
return minIndex;
}
int main()
{
int n, frames[MAX], freq[MAX] = {0}, pages[MAX], page_faults = 0, size = 0;
printf("Enter the number of frames: ");
scanf("%d", &n);
printf("Enter the number of pages: ");
int page_count;
scanf("%d", &page_count);
printf("Enter the reference string: ");
for (int i = 0; i < page_count; i++)
{
scanf("%d", &pages[i]);
}
for (int i = 0; i < page_count; i++)
{
int page = pages[i];
freq[page]++;
int found = 0;
for (int j = 0; j < size; j++)
{
if (frames[j] == page)
{
found = 1;
break;
}
}
if (!found)
{
if (size < n)
{
frames[size++] = page;
}
else
{
int lfuIndex = findLFU(freq, n, frames, size);
frames[lfuIndex] = page;
}
page_faults++;
}
printf("Frames: ");
for (int j = 0; j < size; j++)
{
printf("%d ", frames[j]);
}
printf("\n");
}
printf("Total page faults: %d\n", page_faults);
return 0;
}

Q2
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <dirent.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
void
mk_token(char *s, char *tok[])
{
int i = 0;
char *p;
p = strtok(s, " ");
while (p != NULL)
{
tok[i++] = p;
p = strtok(NULL, " ");
}
tok[i] = NULL;
}
void count(char *fn, char op)
{
int fh, cc = 0, wc = 0, lc = 0;
char c;
fh = open(fn, O_RDONLY);
if (fh == -1)
{
printf("File %s is Not Found!!\n", fn);
return;
}
while (read(fh, &c, 1) > 0)
{
if (c == ' ')
wc++;
else if (c == '\n')
{
wc++;
lc++;
}
cc++;
}
close(fh);
switch (op)
{
case 'c':
printf("No. of characters = %d\n", cc);
break;
case 'w':
printf("No. of words = %d\n", wc);
break;
case 'l':
printf("No. of lines = %d\n", lc);
break;
default:
printf("Bad Command!!");
break;
}
}
void typeline(char *fn, char *op)
{
int fh, i = 0, j = 0, n;
char c;
fh = open(fn, O_RDONLY);
if (fh == -1)
{
printf("File %s is Not Found!!\n", fn);
return;
}
if (strcmp(op, "a") == 0)
{
while (read(fh, &c, 1) > 0)
{
printf("%c", c);
}
}
n = atoi(op);
if (n > 0)
{
while (read(fh, &c, 1) > 0)
{
printf("%c", c);
if (c == '\n')
i++;
if (i == n)
break;
}
close(fh);
return;
}
if (n < 0)
{
while (read(fh, &c, 1) > 0)
{
if (c == '\n')
i++;
}
lseek(fh, 0, SEEK_SET);
while (read(fh, &c, 1) > 0)
{
if (c == '\n')
j++;
if (i == j - n)
break;
}
while (read(fh, &c, 1) > 0)
{
printf("%c", c);
}
}
close(fh);
}
void list(char *dn, char op)
{
DIR *dp;
struct dirent *entry;
int dc = 0, fc = 0;
dp = opendir(dn);
if (dp == NULL)
{
printf("Directory %s is Not Found!!\n", dn);
return;
}
switch (op)
{
case 'f':
while (entry = readdir(dp))
{
if (entry->d_type == DT_REG)
printf("%s\n", entry->d_name);
}
break;
case 'n':
while (entry = readdir(dp))
{
if (entry->d_type == DT_DIR)
dc++;
if (entry->d_type == DT_REG)
fc++;
}
printf("DIR = %d\nFiles = %d\n", dc, fc);
break;
case 'i':
while (entry = readdir(dp))
{
if (entry->d_type == DT_REG)
printf("%s\t%d\n", entry->d_name, entry->d_fileno);
}
break;
default:
printf("Bad Command!!");
break;
}
closedir(dp);
}

int main()
{
int pid;
char ch;
char buff[80], *args[10];
printf("myshell$ ");
fflush(stdin);
fgets(buff, 80, stdin);
buff[strlen(buff) - 1] = '\0';
mk_token(buff, args);
if (strcmp(args[0], "count") == 0)
count(args[2], args[1][0]);
else if (strcmp(args[0], "list") == 0)
list(args[2], args[1][0]);
else if (strcmp(args[0], "typeline") == 0)
typeline(args[2], args[1]);
else
{
if (execvp(args[0], args) == -1)
printf("Command Not Found!!\nPlease Enter Proper Command....\n");
}
return 0;
}
